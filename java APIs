///////////////////////////////////////////////
import java.util.Arrays;
Arrays.sort();
    // 문자열 배열 정렬 (가나다 순으로 소팅)
    String s[] = {  "맹구",                  "배용준",                  "땡칠이",                  "장동건",                  "강수정",                  "송창식",                  "황당해",                  "고은아"};
    Arrays.sort(s);
    
    / 숫자 배열 정렬
    double num[] = {               -1000,                     0.07890264912715708,                                     0.2,                    -0.18441624291164838,                                       0,                                     123,                                    -0.1,                                    -0.1,                                    1000,                                  0.4999};
    Arrays.sort(num);
    Arrays.equals(char[], char[]);//두 문자배열이 서로 같으면 true 아니면 false
    Arrays.equals(int[], int[]);//두 숫자배열이 서로 같으면 true 아니면 false
 
///////////////////////////////////////////////
Mathatics
///////////////////////////////////////////////
abs() : 절대값 : int a = Math.abs(b) : a = |b|
max() : 최대값 : int a = Math.max(b,c) : b,c 중 큰 수가 a 에 대입된다.
min() : 최소값 : int a = Math.min(b,c) : b,c 중 작은 수가 a 에 대입된다.
sqrt() : 제곱근 : double z = Math.sqrt(x) : z = 제곱근 기호 x
exp() : e 지수 : double z = Math.exp(x) : z = e 의 x승
pow() : 거듭제곱 : double z = Math.pow(x,y) : z = x의 y승
log() : 자연대수 : double z = Math.log(x) : z = log x
밑이 y인 log     : double z = Math.log(x)/Math.log(y) <- 밑이 y
sin() : 사인 : double z = Math.sin(x) : z = sin x
cos() : 코사인 : double z = Math.cos(x) : z = cos x
tan() : 탄젠트 : double z = Math.tan(x) : z = tan x


//////////////////////////////////////////////////
자료구조
///////////////////////////////////////////////
// 스택
Stack<Integer> s = new Stack<>();

Stack <TreeNode[]> stack = new Stack<>();
stack.push(new TreeNode[] {t1, t2});


///////////////////////////////////////////////////////
//Integer
///////////////////////////////////////////////////////
Integer.bitCount(int a); // a bit 수 계수
Integer.highestOneBit(int a); // a의 최상위 bit자리 * 2한 값
Integer.toBinaryString(n); -> binary형태의 문자열로 변환

String from = "123";
int to = Integer.parseInt(from);
int from = 123;
String to = Integer.toString(from);

///////////////////////////////////////////////////////
//String
///////////////////////////////////////////////////////
String s = "abcde:fghijk:lmn";
String s2 = "a";
s.toCharArray();    //문자열을 char array로 변환 
s.length(); // 길이 
s.charAt(1); //해당 위치의 문자
String[] splits = s.split(":");
String s = "1+2i";
String[] x = s.split("\\+|i"); // x[0] = 1, x[1] = 2
s.substring(0, 2); // 0번부터 2개 반환
boolean contains = s.contains(s2); //포함하고 있으면 true
s.toLowerCase(); // 소문자 변환
s.equals("abcd"); // 동일한가?
s.indexOf(ch); //해당 캐릭터가 있는 위치 리턴, 없으면 -1
s.indexOf(String); //해당 문자열이 있는 첫 위치 리턴, 없으면 -1
s2 = s.replace("똠방각하", "");// 문자열에서 모든 똠방각하 다 지우기
s2 = s.replaceFirst("똠방각하", "");// 첫번째 "똠방각하"만 없애기
s2 = s.replaceAll("똠방각하", "");// 문자열에서 모든 똠방각하 다 지우기


///////////////////////////////////////////////////////
//StringBuilder
///////////////////////////////////////////////////////
String out = (new StringBuilder(s)).reverse().toString(); //문자열 뒤집기

///////////////////////////////////////////////////////
//List
///////////////////////////////////////////////////////
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
 
List listA = new ArrayList();
List listB = new LinkedList();
List listC = new Vector();
List listD = new Stack();
List<Integer> listA = new ArrayList<>();

 
listA.add("김삿갓");
listA.add("홍아리");
listA.add(new String("홍길동"));
listA.add(1, "1번째 요소값");
int index = listA.indexOf("홍길동");
listA.add(index, "홍길동 앞에 추가");

listA.size(); //list 크기

// 인덱스를 통한 조회
String element0 = listA.get(0).toString();
String element1 = listA.get(1).toString();
String element3 = listA.get(2).toString();
 
//Iterator 통한 전체 조회
Iterator iterator = listA.iterator();
while (iterator.hasNext()) {
    String element = (String) iterator.next();
} 
//for-loop 통한 전체 조회
for(Object object : listA) {
    String element = (String) object;
}

//삭제
listA.remove(0); //index
listA.remove("홍길동"); //  object element

//검색
listA.contains("홍길동")

///////////////////////////////////////
// Character
Character.toString(lowerStr.charAt(j)); // 문자열에서 캐릭터를 하나 얻어서 다시 문자열로 변환

///////////////////////////////////////
// HashSet  중복을 허용하지 않는 Set
Set<String> set =  new HashSet<String>();
for(String str: strArr) {
    set.add(str);
}
set.remove("b");
set.removeAll(set);
set.size();//크기
set.clear();

///////////////////////////////////////
// HashMap(동기), HashSet(비동기)

Map<Integer, Integer> counts = HashMap<Integer, Integer>():
counts.constaisKey(int) // 키값이 존재하는지 확인
counts.put(int Key, int Num) //입력
counts.get(int Key) //조회
counts.getOrDefault(x, 0); // 값이 없으면 default return
Math.max(counts.values()); //전체 값 중에 가장 큰값

///////////////////////////////////////
// Collections
List<Integer> l = new ArrayList<>();

Collections.sort(l); // 기본 sort

///////////////////////////////////////
// TreeMap 중복을 허용하지 않고 Key에 대해 오름차순 정렬
HashMap<Integer, Integer> map = new HashMap<>();
TreeMap<Integer, Integer> tm = new TreeMap<>(map);
Iterator<Integer> iter = tm.keySet().iterator();

while(iter.hasNext()){
    ...
}
